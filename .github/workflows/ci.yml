name: CI

on:
  push:
    branches: [master, main]
  pull_request:
    branches: [master, main]

# Cancel outdated runs when new commits are pushed to save CI minutes
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint-and-typecheck:
    name: Lint & Type Check
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Setup pnpm package manager (version 8.x)
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      # Step 3: Setup Node.js with caching for pnpm
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'pnpm'

      # Step 4: Install all dependencies using frozen lockfile (ensures reproducible builds)
      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # Step 5: Run ESLint on the UI package
      - name: Lint UI package
        run: pnpm --filter @devlaunch/ui lint

      # Step 6: Run TypeScript type checking on the UI package
      - name: TypeScript check UI package
        run: pnpm --filter @devlaunch/ui typecheck

  build-package:
    name: Build UI Package
    runs-on: ubuntu-latest
    needs: lint-and-typecheck

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Setup pnpm package manager
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      # Step 3: Setup Node.js with caching
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'pnpm'

      # Step 4: Install dependencies
      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # Step 5: Build the UI package (creates dist/ folder with production-ready code)
      - name: Build UI package
        run: pnpm --filter @devlaunch/ui build

      # Step 6: Check bundle size to ensure it's under the configured limit
      - name: Check bundle size
        run: |
          cd packages/ui
          pnpm run size

      # Step 7: Upload build artifacts for inspection and debugging
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ui-dist
          path: packages/ui/dist
          retention-days: 7

  build-storybook:
    name: Build Storybook
    runs-on: ubuntu-latest
    needs: build-package

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Setup pnpm package manager
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      # Step 3: Setup Node.js with caching
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'pnpm'

      # Step 4: Install dependencies
      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # Step 5: Build Storybook static site (creates storybook-static/ folder)
      - name: Build Storybook
        run: pnpm --filter @devlaunch/ui build-storybook

      # Step 6: Upload Storybook artifact for inspection
      - name: Upload Storybook artifact
        uses: actions/upload-artifact@v4
        with:
          name: storybook-static
          path: packages/ui/storybook-static
          retention-days: 7

  build-web-app:
    name: Build Next.js App
    runs-on: ubuntu-latest
    needs: lint-and-typecheck

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Setup pnpm package manager
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      # Step 3: Setup Node.js with caching
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'pnpm'

      # Step 4: Install dependencies
      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # Step 5: Build the Next.js web app to ensure no breaking changes from UI package
      - name: Build Next.js app
        run: pnpm --filter web build

  # Summary job that checks all previous jobs succeeded
  all-checks-passed:
    name: All Checks Passed ✅
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, build-package, build-storybook, build-web-app]
    if: always()

    steps:
      # Fail if any of the required jobs failed
      - name: Check all jobs succeeded
        run: |
          if [ "${{ needs.lint-and-typecheck.result }}" != "success" ] || \
             [ "${{ needs.build-package.result }}" != "success" ] || \
             [ "${{ needs.build-storybook.result }}" != "success" ] || \
             [ "${{ needs.build-web-app.result }}" != "success" ]; then
            echo "❌ Some checks failed"
            exit 1
          fi
          echo "✅ All checks passed!"
